# -*- coding: utf-8 -*-
"""health_advice_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X7yucQd7Nrs8XETMw8SgnWEGHhPFIape
"""

import pandas as pd

# Load datasets
heart_df = pd.read_csv("heart_disease.csv")
obesity_df = pd.read_csv("obesity_prediction.csv")

# Rename columns for consistency
heart_df.rename(columns={'sex': 'gender'}, inplace=True)

# Merge on age and gender (may not be exact but fine for synthetic)
merged_df = pd.merge(heart_df, obesity_df, on=['age', 'gender'], how='inner')

# Drop duplicates if any
merged_df.drop_duplicates(inplace=True)

# Optional: Drop irrelevant or duplicate columns
merged_df = merged_df.loc[:, ~merged_df.columns.duplicated()]

# Save processed data
merged_df.to_csv("combined_disease_dataset.csv", index=False)

print("‚úÖ Combined dataset shape:", merged_df.shape)
print("‚úÖ Target columns:", ['target_heart_disease', 'target_obesity'])

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.multioutput import MultiOutputClassifier
from sklearn.ensemble import RandomForestClassifier

# Load merged data
df = pd.read_csv("combined_disease_dataset.csv")

# Separate features and targets
X = df.drop(['target_heart_disease', 'target_obesity'], axis=1)
y = df[['target_heart_disease', 'target_obesity']]

# Identify categorical and numerical columns
categorical_cols = X.select_dtypes(include=['object']).columns.tolist()
numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()

# Build preprocessing pipeline
preprocessor = ColumnTransformer(transformers=[
    ('num', StandardScaler(), numerical_cols),
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
])

# Combine preprocessing + model pipeline
model_pipeline = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('classifier', MultiOutputClassifier(RandomForestClassifier(random_state=42)))
])

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the model
model_pipeline.fit(X_train, y_train)

# Save the model
import joblib
joblib.dump(model_pipeline, "disease_risk_model.pkl")

print("‚úÖ Model trained and saved successfully.")

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load both datasets
heart_df = pd.read_csv("heart_disease.csv")
obesity_df = pd.read_csv("obesity_prediction.csv")

# Merge on patient ID or index
combined_df = pd.concat([heart_df, obesity_df.drop(columns=['age'])], axis=1)

# Save for later steps
combined_df.to_csv("combined_disease_dataset.csv", index=False)

import shap

# Use TreeExplainer specifically for RandomForest (fast and avoids deep learning deps)
explainer = shap.TreeExplainer(rf_heart)

# Get SHAP values
shap_values = explainer.shap_values(X_test_df)

def generate_health_advice(patient_data, heart_risk, obesity_risk, top_features):
    prompt = f"""
    Patient Health Report:
    ----------------------
    Risk Predictions:
    - Heart Disease: {'High' if heart_risk else 'Low'}
    - Obesity: {'High' if obesity_risk else 'Low'}

    Key Risk Factors:
    {', '.join(top_features)}

    Patient Profile:
    {patient_data.to_string()}

    Advice:
    Based on the risks and health factors above, write a personalized health improvement plan.
    """

    return prompt

# Make predictions
y_pred = pipeline.predict(X_test)

# Choose one patient from test set
i = 5
patient_row = X_test.iloc[i]
patient_data = patient_row
heart_pred = y_pred[i][0]
obesity_pred = y_pred[i][1]

# Get top 3 SHAP feature names for this patient
shap_values_heart_instance = shap_values[1][i]  # class=1
top_features_idx = np.argsort(np.abs(shap_values_heart_instance))[::-1][:3]
top_feature_names = X_test_df.columns[top_features_idx].tolist()

# Generate the prompt
prompt_text = generate_health_advice(patient_data, heart_pred, obesity_pred, top_feature_names)
print(prompt_text)

for i in range(5):  # You can increase to len(X_test)
    patient_row = X_test.iloc[i]
    heart_pred = y_pred[i][0]
    obesity_pred = y_pred[i][1]
    shap_values_heart_instance = shap_values[1][i]
    top_features_idx = np.argsort(np.abs(shap_values_heart_instance))[::-1][:3]
    top_feature_names = X_test_df.columns[top_features_idx].tolist()

    prompt_text = generate_health_advice(patient_row, heart_pred, obesity_pred, top_feature_names)
    print(f"\n\n--- Patient {i+1} ---")
    print(prompt_text)

!pip install fpdf matplotlib

from fpdf import FPDF
import matplotlib.pyplot as plt
import os

os.makedirs("reports", exist_ok=True)

for i in range(5):  # You can increase this to len(X_test)
    patient_row = X_test.iloc[i]
    heart_pred = y_pred[i][0]
    obesity_pred = y_pred[i][1]
    shap_values_heart_instance = shap_values[1][i]
    top_features_idx = np.argsort(np.abs(shap_values_heart_instance))[::-1][:3]
    top_feature_names = X_test_df.columns[top_features_idx].tolist()

    # Generate prompt
    advice_text = generate_health_advice(patient_row, heart_pred, obesity_pred, top_feature_names)

    # Plot SHAP bar
    plt.figure()
    shap.plots.bar(shap.Explanation(values=shap_values_heart_instance,
                                     base_values=explainer.expected_value[1],
                                     data=X_test_df.iloc[i],
                                     feature_names=X_test_df.columns), max_display=5, show=False)
    plt.tight_layout()
    shap_plot_path = f"reports/shap_plot_{i}.png"
    plt.savefig(shap_plot_path)
    plt.close()

    # Generate PDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, advice_text)
    pdf.image(shap_plot_path, x=10, y=pdf.get_y(), w=pdf.w - 20)

    # Save
    pdf.output(f"reports/Patient_Report_{i+1}.pdf")

!pip install openai

!pip install fpdf matplotlib

import streamlit as st
import pandas as pd
import shap
import matplotlib.pyplot as plt
import openai


# Load model and data
@st.cache_data
def load_data():
    df = pd.read_csv("combined_disease_dataset.csv")
    return df



# Streamlit UI
st.title("üß† Disease Prediction + Health Advice Generator")
df = load_data()
patient_index = st.slider("Select Patient", 0, len(df)-1, 0)

st.subheader("Patient Profile")
st.write(df.iloc[patient_index])

# Simulate predictions (plug your model here)
heart_pred = 1  # replace with model.predict
obesity_pred = 1
top_features = ["Age", "Cholesterol", "BMI"]

# Prompt generation
prompt = generate_health_advice(df.iloc[patient_index], heart_pred, obesity_pred, top_features)
st.subheader("üìù GPT-Generated Advice")


# SHAP Plot (optional)
st.subheader("üîç SHAP Explanation")
fig, ax = plt.subplots()
shap_values_single = shap_values[1][patient_index]
shap.plots.bar(shap.Explanation(values=shap_values_single, base_values=explainer.expected_value[1],
                                 data=X_test_df.iloc[patient_index], feature_names=X_test_df.columns),
               max_display=5, show=False)
st.pyplot(fig)

